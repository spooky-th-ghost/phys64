    Checking phys64 v0.1.0 (/home/spooky/Code/phys64)
warning: variants `Double` and `Tripple` are never constructed
   --> src/types.rs:156:5
    |
153 | pub enum JumpStage {
    |          --------- variants in this enum
...
156 |     Double,
    |     ^^^^^^
157 |     Tripple,
    |     ^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `get_jump_force` is never used
   --> src/types.rs:161:8
    |
160 | impl JumpStage {
    | -------------- method in this implementation
161 |     fn get_jump_force(&self) -> f32 {
    |        ^^^^^^^^^^^^^^

warning: field `stage` is never read
   --> src/types.rs:172:5
    |
171 | pub struct Jumper {
    |            ------ field in this struct
172 |     stage: JumpStage,
    |     ^^^^^

warning: methods `increase_stage`, `reset_stage`, and `get_force` are never used
   --> src/types.rs:176:12
    |
175 | impl Jumper {
    | ----------- methods in this implementation
176 |     pub fn increase_stage(&mut self) {
    |            ^^^^^^^^^^^^^^
...
184 |     pub fn reset_stage(&mut self) {
    |            ^^^^^^^^^^^
...
188 |     pub fn get_force(&self) -> f32 {
    |            ^^^^^^^^^

warning: fields `accel`, `base`, `max`, `base_max`, `accel_timer`, and `reset_timer` are never read
   --> src/types.rs:196:5
    |
194 | pub struct Speed {
    |            ----- fields in this struct
195 |     current: f32,
196 |     accel: f32,
    |     ^^^^^
197 |     base: f32,
    |     ^^^^
198 |     max: f32,
    |     ^^^
199 |     base_max: f32,
    |     ^^^^^^^^
200 |     accel_timer: Timer,
    |     ^^^^^^^^^^^
201 |     reset_timer: Timer,
    |     ^^^^^^^^^^^

warning: methods `reset`, `tick_reset_timer`, `reset_reset_timer`, `should_reset`, and `accelerate` are never used
   --> src/types.rs:209:12
    |
204 | impl Speed {
    | ---------- methods in this implementation
...
209 |     pub fn reset(&mut self) {
    |            ^^^^^
...
215 |     pub fn tick_reset_timer(&mut self, delta: std::time::Duration) {
    |            ^^^^^^^^^^^^^^^^
...
219 |     pub fn reset_reset_timer(&mut self) {
    |            ^^^^^^^^^^^^^^^^^
...
223 |     pub fn should_reset(&self) -> bool {
    |            ^^^^^^^^^^^^
...
227 |     pub fn accelerate(&mut self, delta: std::time::Duration, seconds: f32) {
    |            ^^^^^^^^^^

warning: methods `get`, `set`, `reset`, `is_any`, and `is_active` are never used
   --> src/types.rs:257:12
    |
256 | impl MoveDirection {
    | ------------------ methods in this implementation
257 |     pub fn get(&self) -> Vec3 {
    |            ^^^
...
261 |     pub fn set(&mut self, value: Vec3) {
    |            ^^^
...
265 |     pub fn reset(&mut self) {
    |            ^^^^^
...
269 |     pub fn is_any(&self) -> bool {
    |            ^^^^^^
...
273 |     pub fn is_active(&self) -> bool {
    |            ^^^^^^^^^

warning: method `add_time` is never used
   --> src/types.rs:324:12
    |
291 | impl Force {
    | ---------- method in this implementation
...
324 |     pub fn add_time(&mut self, seconds: f32) {
    |            ^^^^^^^^

warning: variants `Wind` and `Slide` are never constructed
   --> src/types.rs:336:5
    |
333 | pub enum ForceId {
    |          ------- variants in this enum
...
336 |     Wind,
    |     ^^^^
337 |     Slide,
    |     ^^^^^
    |
    = note: `ForceId` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: methods `length` and `reset` are never used
   --> src/types.rs:352:12
    |
347 | impl Forces {
    | ----------- methods in this implementation
...
352 |     pub fn length(&self) -> usize {
    |            ^^^^^^
...
386 |     pub fn reset(&mut self) {
    |            ^^^^^

warning: function `handle_speed` is never used
   --> src/systems.rs:170:4
    |
170 | fn handle_speed(
    |    ^^^^^^^^^^^^

warning: unneeded `return` statement
  --> src/types.rs:49:28
   |
49 |                 Some(_) => return false,
   |                            ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
   = note: `#[warn(clippy::needless_return)]` on by default
   = help: remove `return`

warning: unneeded `return` statement
  --> src/types.rs:50:25
   |
50 |                 None => return true,
   |                         ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
   = help: remove `return`

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> src/types.rs:39:9
   |
39 | /         match self.pressed_actions.get(&action) {
40 | |             Some(_) => match self.stale_actions.get(&action) {
41 | |                 None => return true,
42 | |                 _ => (),
43 | |             },
44 | |             _ => (),
45 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
   = note: `#[warn(clippy::single_match)]` on by default
help: try this
   |
39 ~         if let Some(_) = self.pressed_actions.get(&action) { match self.stale_actions.get(&action) {
40 +             None => return true,
41 +             _ => (),
42 +         } }
   |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
  --> src/types.rs:40:24
   |
40 |               Some(_) => match self.stale_actions.get(&action) {
   |  ________________________^
41 | |                 None => return true,
42 | |                 _ => (),
43 | |             },
   | |_____________^ help: try this: `if self.stale_actions.get(&action) == None { return true }`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> src/types.rs:82:17
   |
82 | /                 match timer.finished() {
83 | |                     true => {
84 | |                         self.stale_actions.insert(*action);
85 | |                         stale_buffers.push(*action);
86 | |                     }
87 | |                     _ => (),
88 | |                 }
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
   |
82 ~                 if let true = timer.finished() {
83 +                     self.stale_actions.insert(*action);
84 +                     stale_buffers.push(*action);
85 +                 }
   |

warning: manual implementation of `Option::map`
   --> src/types.rs:293:32
    |
293 |           let expiration_timer = if let Some(total_lifetime) = lifespan {
    |  ________________________________^
294 | |             Some(Timer::from_seconds(total_lifetime, TimerMode::Once))
295 | |         } else {
296 | |             None
297 | |         };
    | |_________^ help: try this: `lifespan.map(|total_lifetime| Timer::from_seconds(total_lifetime, TimerMode::Once))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_map
    = note: `#[warn(clippy::manual_map)]` on by default

warning: if let .. else expression looks like `matches!` macro
   --> src/types.rs:379:9
    |
379 | /         if let Some(_) = self.forces.get(&force_id) {
380 | |             true
381 | |         } else {
382 | |             false
383 | |         }
    | |_________^ help: try this: `matches!(self.forces.get(&force_id), Some(_))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
    = note: `#[warn(clippy::match_like_matches_macro)]` on by default

warning: redundant pattern matching, consider using `is_some()`
   --> src/types.rs:379:16
    |
379 |         if let Some(_) = self.forces.get(&force_id) {
    |         -------^^^^^^^----------------------------- help: try this: `if self.forces.get(&force_id).is_some()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching
    = note: `#[warn(clippy::redundant_pattern_matching)]` on by default

warning: redundant pattern matching, consider using `is_some()`
   --> src/systems.rs:279:16
    |
279 |         if let Some(_) = rapier_context.cast_shape(
    |                ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching
help: try this
    |
279 ~         if rapier_context.cast_shape(
280 +             shape_position,
281 +             shape_rotation,
282 +             cast_direction,
283 +             cast_shape,
284 +             cast_distance,
285 +             stop_at_penetration,
286 +             cast_filter,
287 ~         ).is_some() {
    |

warning: `phys64` (bin "phys64") generated 20 warnings (run `cargo clippy --fix --bin "phys64"` to apply 5 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 1.03s
